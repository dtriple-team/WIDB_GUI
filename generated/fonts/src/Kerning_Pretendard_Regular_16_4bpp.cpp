#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_Pretendard_Regular_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0026, ampersand], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0026, ampersand], Kerning dist = -1)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x002E, period], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0031, one], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0031, one], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0031, one], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0034, four], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0034, four], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0069,  1 },  // (First char = [0x0069, i], Second char = [0x0057, W], Kerning dist = 1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0057, W], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0057, W], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0066, f], Kerning dist = 1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0074, t], Kerning dist = 1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0076, v], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0079, y], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -1)
};
